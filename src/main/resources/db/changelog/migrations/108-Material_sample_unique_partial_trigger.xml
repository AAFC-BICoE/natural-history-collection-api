<?xml version="1.1" encoding="UTF-8" standalone="no" ?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog db/changelog/xsd/dbchangelog-4.4.xsd"
                   objectQuotingStrategy="QUOTE_ONLY_RESERVED_WORDS">

  <changeSet id="108-Material_sample_unique_partial_trigger" context="schema-change" author="cgendreau">
    <!-- Drop index created at changeset #104 -->
    <dropIndex tableName="material_sample" indexName="unique_material_sample_name" />

    <!-- Function to check for material sample names that exist in database already -->
    <sql>
      CREATE OR REPLACE FUNCTION material_name_exists(id int, collection_id int, name varchar) RETURNS boolean AS 
      '
        SELECT EXISTS (select id from material_sample where collection_id = $2 AND lower(material_sample_name)=lower($3) and id != $1);
      '
      LANGUAGE SQL
      RETURNS NULL ON NULL INPUT;
    </sql>

    <!-- Function that will be triggered on each INSERT or UPDATE event on the material sample.
         This function will raise an exception if the material sample name already exists. -->
    <sql>
      CREATE OR REPLACE FUNCTION check_material_name_unique() RETURNS TRIGGER AS
      '
        BEGIN
            IF (TG_OP = ''UPDATE'' AND NEW.material_sample_name = OLD.material_sample_name AND NEW.allow_duplicate_name=OLD.allow_duplicate_name AND NEW.collection_id=OLD.collection_id)
              THEN RETURN NEW;
            END IF;

            IF NEW.allow_duplicate_name=false AND material_name_exists(NEW.id, NEW.collection_id, NEW.material_sample_name) THEN
              RAISE EXCEPTION unique_violation 
              USING MESSAGE = ''material_sample_name in collection violates unique constraint "material_sample_name_unique"'',
              CONSTRAINT = ''material_sample_name_unique'';
            END IF;
            RETURN NEW;
        END;
      '
      LANGUAGE PLPGSQL;
    </sql>

    <!-- Create the new trigger that is activated on every new and updated material sample event. -->
    <sql>
      CREATE TRIGGER check_material_name_unique BEFORE INSERT OR UPDATE ON material_sample
        FOR EACH ROW EXECUTE PROCEDURE check_material_name_unique();
    </sql>
  </changeSet>
</databaseChangeLog>